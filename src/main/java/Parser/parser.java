package Parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import Lexer.MPLexer;
import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\007\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\003\000\002\006\005" +
    "\000\002\010\005\000\002\010\003\000\002\007\003\000" +
    "\002\007\003\000\002\005\004\000\002\005\003\000\002" +
    "\011\007\000\002\011\007\000\002\011\011\000\002\011" +
    "\006\000\002\011\007\000\002\011\007\000\002\011\003" +
    "\000\002\013\005\000\002\012\005\000\002\012\003\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\014" +
    "\005\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\027\005\001\002\000\004\002\131\001" +
    "\002\000\004\026\006\001\002\000\004\004\007\001\002" +
    "\000\004\005\010\001\002\000\004\006\012\001\002\000" +
    "\004\002\001\001\002\000\006\027\017\030\013\001\002" +
    "\000\004\036\ufff8\001\002\000\004\036\115\001\002\000" +
    "\022\006\ufffd\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034\ufffd" +
    "\035\ufffd\036\ufffd\001\002\000\022\006\012\027\017\030" +
    "\013\031\026\033\020\034\022\035\024\036\030\001\002" +
    "\000\004\036\ufff9\001\002\000\004\004\123\001\002\000" +
    "\020\006\uffef\007\uffef\031\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\001\002\000\004\004\114\001\002\000\020\006" +
    "\012\007\113\031\026\033\020\034\022\035\024\036\030" +
    "\001\002\000\004\004\104\001\002\000\022\006\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\001\002\000\004\004\072\001\002\000\020\006\ufff6\007" +
    "\ufff6\031\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\001\002" +
    "\000\004\022\031\001\002\000\010\004\032\036\037\037" +
    "\042\001\002\000\010\004\032\036\037\037\042\001\002" +
    "\000\034\005\uffe8\010\uffe8\011\uffe8\012\057\014\064\016" +
    "\063\017\061\020\054\021\055\022\060\023\056\024\uffe8" +
    "\025\uffe8\001\002\000\014\005\uffec\010\052\011\uffec\024" +
    "\uffec\025\uffec\001\002\000\006\011\050\024\047\001\002" +
    "\000\040\005\uffdf\010\uffdf\011\uffdf\012\uffdf\013\043\014" +
    "\uffdf\015\044\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\001\002\000\040\005\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\001\002\000\040\005\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\001\002\000\014" +
    "\005\uffea\010\uffea\011\uffea\024\uffea\025\uffea\001\002\000" +
    "\040\005\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\001\002\000\010\004\032\036\037" +
    "\037\042\001\002\000\010\004\032\036\037\037\042\001" +
    "\002\000\040\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\001\002\000\040\005\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\001\002\000\020\006\ufff2\007\ufff2\031\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\001\002\000\010\004\032" +
    "\036\037\037\042\001\002\000\014\005\uffed\010\052\011" +
    "\uffed\024\uffed\025\uffed\001\002\000\010\004\032\036\037" +
    "\037\042\001\002\000\014\005\uffeb\010\uffeb\011\uffeb\024" +
    "\uffeb\025\uffeb\001\002\000\010\004\uffe3\036\uffe3\037\uffe3" +
    "\001\002\000\010\004\uffe2\036\uffe2\037\uffe2\001\002\000" +
    "\010\004\uffe4\036\uffe4\037\uffe4\001\002\000\010\004\032" +
    "\036\037\037\042\001\002\000\010\004\uffe5\036\uffe5\037" +
    "\uffe5\001\002\000\010\004\uffe6\036\uffe6\037\uffe6\001\002" +
    "\000\010\004\032\036\037\037\042\001\002\000\010\004" +
    "\uffe7\036\uffe7\037\uffe7\001\002\000\010\004\032\036\037" +
    "\037\042\001\002\000\040\005\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\043\014\uffe0\015\044\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\001\002\000" +
    "\020\005\uffe9\010\uffe9\011\uffe9\012\057\014\064\024\uffe9" +
    "\025\uffe9\001\002\000\040\005\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\043\014\uffe1\015\044\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\001\002\000" +
    "\006\005\071\011\050\001\002\000\040\005\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\001\002\000\010\004\032\036\037\037\042\001\002\000" +
    "\006\005\074\011\050\001\002\000\004\006\076\001\002" +
    "\000\022\006\ufff4\007\ufff4\031\ufff4\032\102\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\001\002\000\016\006\012\031\026" +
    "\033\020\034\022\035\024\036\030\001\002\000\020\006" +
    "\012\007\101\031\026\033\020\034\022\035\024\036\030" +
    "\001\002\000\020\006\ufff7\007\ufff7\031\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\001\002\000\022\006\uffee\007\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\001" +
    "\002\000\004\006\076\001\002\000\020\006\ufff3\007\ufff3" +
    "\031\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\001\002\000" +
    "\010\004\032\036\037\037\042\001\002\000\006\005\110" +
    "\025\107\001\002\000\010\005\uffd7\011\050\025\uffd7\001" +
    "\002\000\010\004\032\036\037\037\042\001\002\000\004" +
    "\024\111\001\002\000\020\006\ufff0\007\ufff0\031\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\001\002\000\010\005\uffd8" +
    "\011\050\025\uffd8\001\002\000\022\002\uffff\006\uffff\007" +
    "\uffff\031\uffff\033\uffff\034\uffff\035\uffff\036\uffff\001\002" +
    "\000\004\036\115\001\002\000\010\005\ufffa\024\ufffa\025" +
    "\ufffa\001\002\000\006\005\120\025\117\001\002\000\004" +
    "\036\122\001\002\000\004\024\121\001\002\000\020\006" +
    "\ufff1\007\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\001\002\000\010\005\ufffb\024\ufffb\025\ufffb\001\002\000" +
    "\010\004\032\036\037\037\042\001\002\000\006\005\125" +
    "\011\050\001\002\000\004\006\076\001\002\000\020\006" +
    "\ufff5\007\ufff5\031\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\001\002\000\006\024\130\025\117\001\002\000\022\006" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\010\004\015\006" +
    "\014\007\013\001\001\000\002\001\001\000\004\010\126" +
    "\001\001\000\002\001\001\000\014\003\020\005\022\006" +
    "\024\007\013\011\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\020\011\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\034\015\033\016\040\017\032\021\035\022\037" +
    "\001\001\000\016\012\067\015\033\016\040\017\032\021" +
    "\035\022\037\001\001\000\004\020\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\045\001\001\000\004\022\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\050\016\040\017\032\021\035\022\037\001\001\000" +
    "\002\001\001\000\012\016\052\017\032\021\035\022\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\066\022\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\065\021" +
    "\035\022\037\001\001\000\002\001\001\000\006\021\064" +
    "\022\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\072\015\033\016\040\017\032\021\035\022\037\001" +
    "\001\000\002\001\001\000\004\013\074\001\001\000\002" +
    "\001\001\000\010\003\020\005\076\011\026\001\001\000" +
    "\006\003\020\011\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\102\001\001\000\002\001\001\000" +
    "\020\012\105\014\104\015\033\016\040\017\032\021\035" +
    "\022\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\111\015\033\016\040\017\032\021\035\022\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\123" +
    "\015\033\016\040\017\032\021\035\022\037\001\001\000" +
    "\002\001\001\000\004\013\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public static void main(String[] args)
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   parser mpParser = new parser( scanner );
		   mpParser.parse();
	  }
	  catch( Exception e )
	  {
		   System.out.println(e.getMessage());
	  }
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= INT MAIN LP RP Block 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 1");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= LV VarList StatementList RV 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 2");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarList ::= VarList VarDecl 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 3");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarList ::= VarDecl 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 4");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= Type NameList DOTCOMMA 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 5");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= NameList COMMA ID 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 6");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= ID 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 7");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 8");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 9");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 10");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StatementList ::= Statement 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 11");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= WHILE LP Expression RP StatementListInBrackets 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 12");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= IF LP Expression RP StatementListInBrackets 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 13");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= IF LP Expression RP StatementListInBrackets ELSE StatementListInBrackets 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 14");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= ID EQ Expression DOTCOMMA 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 15");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= PRINTF LP NameList RP DOTCOMMA 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 16");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= SCANF LP ExpressionList RP DOTCOMMA 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 17");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= Block 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 18");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementListInBrackets ::= LV StatementList RV 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 19");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementListInBrackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 20");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expression ::= AndExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 21");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 22");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AndExpression ::= RelExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 23");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 24");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RelExpression ::= ArExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 25");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelOp ::= LESS 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 26");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RelOp ::= LESSE 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 27");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= EQ 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 28");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= NEQ 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 29");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= GREAT 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 30");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelOp ::= GREATE 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 31");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ArExpression ::= ArExpression PLUS Term 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 32");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ArExpression ::= ArExpression MIN Term 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 33");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ArExpression ::= Term 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 34");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Term ::= Term MUL Factor 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 35");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Term ::= Term DIV Factor 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 36");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Term ::= Factor 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 37");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Factor ::= ID 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 38");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Factor ::= CONST 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 39");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Factor ::= LP Expression RP 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 40");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 41");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpressionList ::= Expression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 42");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
