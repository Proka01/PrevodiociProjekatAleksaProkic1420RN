package Parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import Lexer.MPLexer;
import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\007\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\003\000\002\006\005" +
    "\000\002\010\005\000\002\010\003\000\002\007\003\000" +
    "\002\007\003\000\002\005\004\000\002\005\003\000\002" +
    "\011\007\000\002\011\007\000\002\011\011\000\002\011" +
    "\006\000\002\011\007\000\002\011\007\000\002\013\005" +
    "\000\002\012\005\000\002\012\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\014\005\000\002\014" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\030\005\001\002\000\004\002\130\001" +
    "\002\000\004\027\006\001\002\000\004\004\007\001\002" +
    "\000\004\005\010\001\002\000\004\006\012\001\002\000" +
    "\004\002\001\001\002\000\006\030\017\031\013\001\002" +
    "\000\004\037\ufff8\001\002\000\004\037\114\001\002\000" +
    "\020\030\ufffd\031\ufffd\032\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\001\002\000\020\030\017\031\013\032\025\034" +
    "\020\035\021\036\023\037\027\001\002\000\004\037\ufff9" +
    "\001\002\000\004\004\122\001\002\000\004\004\113\001" +
    "\002\000\016\007\112\032\025\034\020\035\021\036\023" +
    "\037\027\001\002\000\004\004\103\001\002\000\020\030" +
    "\ufffe\031\ufffe\032\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\001\002\000\004\004\071\001\002\000\016\007\ufff6\032" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\001\002\000\004" +
    "\024\030\001\002\000\010\004\031\037\036\040\041\001" +
    "\002\000\010\004\031\037\036\040\041\001\002\000\034" +
    "\005\uffe9\010\uffe9\011\uffe9\012\056\014\063\016\062\017" +
    "\060\020\053\021\054\022\057\023\055\025\uffe9\026\uffe9" +
    "\001\002\000\014\005\uffed\010\051\011\uffed\025\uffed\026" +
    "\uffed\001\002\000\006\011\047\025\046\001\002\000\040" +
    "\005\uffe0\010\uffe0\011\uffe0\012\uffe0\013\042\014\uffe0\015" +
    "\043\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\025\uffe0\026\uffe0\001\002\000\040\005\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\025\uffdc\026\uffdc\001" +
    "\002\000\040\005\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\025\uffdd\026\uffdd\001\002\000\014\005\uffeb" +
    "\010\uffeb\011\uffeb\025\uffeb\026\uffeb\001\002\000\040\005" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\025" +
    "\uffdb\026\uffdb\001\002\000\010\004\031\037\036\040\041" +
    "\001\002\000\010\004\031\037\036\040\041\001\002\000" +
    "\040\005\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\025\uffde\026\uffde\001\002\000\040\005\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf" +
    "\001\002\000\016\007\ufff2\032\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\001\002\000\010\004\031\037\036\040\041" +
    "\001\002\000\014\005\uffee\010\051\011\uffee\025\uffee\026" +
    "\uffee\001\002\000\010\004\031\037\036\040\041\001\002" +
    "\000\014\005\uffec\010\uffec\011\uffec\025\uffec\026\uffec\001" +
    "\002\000\010\004\uffe4\037\uffe4\040\uffe4\001\002\000\010" +
    "\004\uffe3\037\uffe3\040\uffe3\001\002\000\010\004\uffe5\037" +
    "\uffe5\040\uffe5\001\002\000\010\004\031\037\036\040\041" +
    "\001\002\000\010\004\uffe6\037\uffe6\040\uffe6\001\002\000" +
    "\010\004\uffe7\037\uffe7\040\uffe7\001\002\000\010\004\031" +
    "\037\036\040\041\001\002\000\010\004\uffe8\037\uffe8\040" +
    "\uffe8\001\002\000\010\004\031\037\036\040\041\001\002" +
    "\000\040\005\uffe1\010\uffe1\011\uffe1\012\uffe1\013\042\014" +
    "\uffe1\015\043\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\025\uffe1\026\uffe1\001\002\000\020\005\uffea\010" +
    "\uffea\011\uffea\012\056\014\063\025\uffea\026\uffea\001\002" +
    "\000\040\005\uffe2\010\uffe2\011\uffe2\012\uffe2\013\042\014" +
    "\uffe2\015\043\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\025\uffe2\026\uffe2\001\002\000\006\005\070\011" +
    "\047\001\002\000\040\005\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\025\uffda\026\uffda\001\002\000\010" +
    "\004\031\037\036\040\041\001\002\000\006\005\073\011" +
    "\047\001\002\000\004\006\075\001\002\000\020\007\ufff4" +
    "\032\ufff4\033\101\034\ufff4\035\ufff4\036\ufff4\037\ufff4\001" +
    "\002\000\014\032\025\034\020\035\021\036\023\037\027" +
    "\001\002\000\016\007\077\032\025\034\020\035\021\036" +
    "\023\037\027\001\002\000\020\007\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\037\uffef\001\002\000\016\007" +
    "\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\001\002" +
    "\000\004\006\075\001\002\000\016\007\ufff3\032\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\001\002\000\010\004\031" +
    "\037\036\040\041\001\002\000\006\005\107\026\106\001" +
    "\002\000\010\005\uffd8\011\047\026\uffd8\001\002\000\010" +
    "\004\031\037\036\040\041\001\002\000\004\025\110\001" +
    "\002\000\016\007\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\001\002\000\010\005\uffd9\011\047\026\uffd9\001" +
    "\002\000\004\002\uffff\001\002\000\004\037\114\001\002" +
    "\000\010\005\ufffa\025\ufffa\026\ufffa\001\002\000\006\005" +
    "\117\026\116\001\002\000\004\037\121\001\002\000\004" +
    "\025\120\001\002\000\016\007\ufff1\032\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\001\002\000\010\005\ufffb\025\ufffb" +
    "\026\ufffb\001\002\000\010\004\031\037\036\040\041\001" +
    "\002\000\006\005\124\011\047\001\002\000\004\006\075" +
    "\001\002\000\016\007\ufff5\032\ufff5\034\ufff5\035\ufff5\036" +
    "\ufff5\037\ufff5\001\002\000\006\025\127\026\116\001\002" +
    "\000\020\030\ufffc\031\ufffc\032\ufffc\034\ufffc\035\ufffc\036" +
    "\ufffc\037\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\010\004\015\006" +
    "\014\007\013\001\001\000\002\001\001\000\004\010\125" +
    "\001\001\000\002\001\001\000\012\005\021\006\023\007" +
    "\013\011\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\033\015\032\016\037\017" +
    "\031\021\034\022\036\001\001\000\016\012\066\015\032" +
    "\016\037\017\031\021\034\022\036\001\001\000\004\020" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\044\001\001\000\004" +
    "\022\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\047\016\037\017\031\021\034" +
    "\022\036\001\001\000\002\001\001\000\012\016\051\017" +
    "\031\021\034\022\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\065\022\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\064\021\034\022\036\001\001\000\002\001" +
    "\001\000\006\021\063\022\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\071\015\032\016\037\017\031" +
    "\021\034\022\036\001\001\000\002\001\001\000\004\013" +
    "\073\001\001\000\002\001\001\000\006\005\075\011\025" +
    "\001\001\000\004\011\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\101\001\001\000\002\001\001" +
    "\000\020\012\104\014\103\015\032\016\037\017\031\021" +
    "\034\022\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\110\015\032\016\037\017\031\021\034\022" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\122\015\032\016\037\017\031\021\034\022\036\001\001" +
    "\000\002\001\001\000\004\013\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public static void main(String[] args)
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   parser mpParser = new parser( scanner );
		   mpParser.parse();
	  }
	  catch( Exception e )
	  {
		   System.out.println(e.getMessage());
	  }
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= INT MAIN LP RP Block 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 1");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= LV VarList StatementList RV 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 2");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarList ::= VarList VarDecl 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 3");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarList ::= VarDecl 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 4");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= Type NameList DOTCOMMA 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 5");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= NameList COMMA ID 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 6");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= ID 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 7");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 8");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 9");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 10");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StatementList ::= Statement 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 11");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= WHILE LP Expression RP StatementListInBrackets 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 12");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= IF LP Expression RP StatementListInBrackets 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 13");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= IF LP Expression RP StatementListInBrackets ELSE StatementListInBrackets 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 14");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= ID ASSIGN Expression DOTCOMMA 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 15");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= PRINTF LP NameList RP DOTCOMMA 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 16");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= SCANF LP ExpressionList RP DOTCOMMA 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 17");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StatementListInBrackets ::= LV StatementList RV 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 18");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementListInBrackets",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 19");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expression ::= AndExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 20");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 21");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AndExpression ::= RelExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 22");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 23");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RelExpression ::= ArExpression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 24");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RelOp ::= LESS 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 25");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelOp ::= LESSE 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 26");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RelOp ::= EQ 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 27");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= NEQ 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 28");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= GREAT 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 29");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= GREATE 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 30");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ArExpression ::= ArExpression PLUS Term 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 31");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ArExpression ::= ArExpression MIN Term 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 32");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ArExpression ::= Term 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 33");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Term ::= Term MUL Factor 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 34");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Term ::= Term DIV Factor 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 35");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Term ::= Factor 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 36");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Factor ::= ID 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 37");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Factor ::= CONST 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 38");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Factor ::= LP Expression RP 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 39");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 40");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpressionList ::= Expression 
            {
              Object RESULT =null;
		
                System.out.println("Redukcija po smeni 41");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
